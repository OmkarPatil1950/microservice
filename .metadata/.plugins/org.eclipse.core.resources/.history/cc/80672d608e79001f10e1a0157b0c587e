package com.example.demo.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.DTO.UserDTO;
import com.example.demo.entity.User;
import com.example.demo.entity.UserDetails;
import com.example.demo.service.userService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/users")
public class userController {

	@Autowired
	private userService userservice;

	
	@GetMapping
	public ResponseEntity<?> getAllUsers(){
		
		List<User> user = userservice.getAllUsers();
		return new ResponseEntity(user,HttpStatus.OK);
	}
	
	@PostMapping("/save")
	public ResponseEntity<?> saveUser(@RequestBody @Valid UserDTO userdto) {
//	    try {
	        User user = mapToEntity(userdto);
	        User savedUser = userservice.saveUser(user);
	        return ResponseEntity.status(HttpStatus.CREATED)
	                .body("User created successfully with userId: " + savedUser.getUserId());
//	    } catch (DataIntegrityViolationException ex) {
//	        // Handle unique constraint violation (e.g., email already exists)
//	        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
//	                .body("Error: Email must be unique. A user with this email already exists.");
//	    } catch (IllegalArgumentException ex) {
//	        // Handle invalid data
//	        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
//	                .body("Error: Invalid input data. Please check the contact number and other fields.");
//	    } catch (Exception e) {
//	        // Handle any other generic exceptions
//	        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)
//	                .body("Error saving user: " + e.getMessage());
//	    }
	}

	
	
	
	private User mapToEntity(UserDTO userDTO) {
        User user = new User();
        user.setName(userDTO.getName());
        user.setEmail(userDTO.getEmail());
        user.setContact(userDTO.getContact());
       
        
        UserDetails userDetails =  new UserDetails();
        userDetails.setGender(userDTO.getUserdetails().getGender());
        userDetails.setAge(userDTO.getUserdetails().getAge());
        userDetails.setAddress(userDTO.getUserdetails().getAddress());
        userDetails.setPincode(userDTO.getUserdetails().getPincode());
        
        
        user.setUserdetails(userDetails);
        userDetails.setUsers(user);
        // Map other fields as needed
        return user;
    }
}
